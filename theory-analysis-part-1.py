"""
Theory Validation Analysis Script
=================================

This script loads the data generated by `hypo-theory-test.py`
and performs specific analyses to test mathematical theories.

Test 2: Hyperbolic Point Analysis
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fftn, ifftn
import os
import glob

# --- Common Setup ---
N_RES = 128
kx_1d, ky_1d, kz_1d = (np.fft.fftfreq(N_RES) * N_RES,)*3
kx, ky, kz = np.meshgrid(kx_1d, ky_1d, kz_1d, indexing='ij')

def get_vorticity(u_hat, v_hat, w_hat):
    omega_x_hat = 1j*ky*w_hat - 1j*kz*v_hat
    omega_y_hat = 1j*kz*u_hat - 1j*kx*w_hat
    omega_z_hat = 1j*kx*v_hat - 1j*ky*u_hat
    omega_x, omega_y, omega_z = ifftn(omega_x_hat).real, ifftn(omega_y_hat).real, ifftn(omega_z_hat).real
    vort_mag = np.sqrt(omega_x**2 + omega_y**2 + omega_z**2)
    return vort_mag

def analyze_hyperbolic_points():
    print("\n--- Running Test 2: Hyperbolic Point Analysis ---")
    data_dir = "theory_test_data"
    
    u_files = sorted(glob.glob(os.path.join(data_dir, "u_hat_*.npy")))
    if not u_files:
        print(f"Error: No data files found in '{data_dir}'.")
        print("Please run `hypo-theory-test.py` first to generate data.")
        return
    
    latest_u_file = u_files[-1]
    time_str = os.path.basename(latest_u_file).split('_')[-1].replace('.npy', '')
    latest_v_file = os.path.join(data_dir, f"v_hat_t_{time_str}.npy")
    latest_w_file = os.path.join(data_dir, f"w_hat_t_{time_str}.npy")

    print(f"Loading final state at t={float(time_str):.5f}")
    u_hat = np.load(latest_u_file)
    v_hat = np.load(latest_v_file)
    w_hat = np.load(latest_w_file)
    
    print("Calculating velocity gradient tensor...")
    ux = ifftn(1j*kx*u_hat).real; uy = ifftn(1j*ky*u_hat).real; uz = ifftn(1j*kz*u_hat).real
    vx = ifftn(1j*kx*v_hat).real; vy = ifftn(1j*ky*v_hat).real; vz = ifftn(1j*kz*v_hat).real
    wx = ifftn(1j*kx*w_hat).real; wy = ifftn(1j*ky*w_hat).real; wz = ifftn(1j*kz*w_hat).real

    print("Calculating strain-rate tensor and its eigenvalues...")
    Sxx, Sxy, Sxz = ux, 0.5*(uy+vx), 0.5*(uz+wx)
    Syy, Syz = vy, 0.5*(vz+wy)
    Szz = wz

    hyperbolic_points = np.zeros((N_RES, N_RES))
    central_plane_z = N_RES // 2

    for i in range(N_RES):
        for j in range(N_RES):
            strain_tensor_at_point = np.array([
                [Sxx[i,j,central_plane_z], Sxy[i,j,central_plane_z], Sxz[i,j,central_plane_z]],
                [Sxy[i,j,central_plane_z], Syy[i,j,central_plane_z], Syz[i,j,central_plane_z]],
                [Sxz[i,j,central_plane_z], Syz[i,j,central_plane_z], Szz[i,j,central_plane_z]]
            ])
            eigenvalues = np.linalg.eigvalsh(strain_tensor_at_point)
            if np.sum(np.sign(eigenvalues)) == -1: # Signature: (+, -, -)
                 hyperbolic_points[i,j] = 1

    print("Plotting results...")
    vort_mag = get_vorticity(u_hat, v_hat, w_hat)

    fig, axes = plt.subplots(1, 2, figsize=(14, 6))
    fig.suptitle(f"Hyperbolic Point Analysis (t={float(time_str):.5f}, z-plane)", fontsize=16)
    
    im = axes[0].imshow(vort_mag[:,:,central_plane_z].T, cmap='inferno', origin='lower')
    axes[0].set_title("Vorticity Magnitude")
    fig.colorbar(im, ax=axes[0])

    axes[1].imshow(hyperbolic_points.T, cmap='viridis', origin='lower')
    axes[1].set_title("Detected Hyperbolic Points")
    
    filename = "hypo_theory_test_2_hyperbolic_points.png"
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.savefig(filename, dpi=150)
    plt.show()
    print(f"Hyperbolic analysis plot saved to {filename}")


if __name__ == "__main__":
    analyze_hyperbolic_points() 
