"""
Theory Validation Analysis Script - Part 2
==========================================

This script loads the data generated by `hypo-theory-test.py`
and performs specific analyses to test mathematical theories.

Test 3: Self-Similarity Analysis
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import glob

# --- Common Setup ---
N_RES = 128
kx_1d, ky_1d, kz_1d = (np.fft.fftfreq(N_RES) * N_RES,)*3
kx, ky, kz = np.meshgrid(kx_1d, ky_1d, kz_1d, indexing='ij')
x_1d = np.linspace(0, 2*np.pi, N_RES, endpoint=False)

def get_vorticity_magnitude(u_hat, v_hat, w_hat):
    omega_x_hat = 1j*ky*w_hat - 1j*kz*v_hat
    omega_y_hat = 1j*kz*u_hat - 1j*kx*w_hat
    omega_z_hat = 1j*kx*v_hat - 1j*ky*u_hat
    omega_x = np.fft.ifftn(omega_x_hat).real
    omega_y = np.fft.ifftn(omega_y_hat).real
    omega_z = np.fft.ifftn(omega_z_hat).real
    return np.sqrt(omega_x**2 + omega_y**2 + omega_z**2)

def analyze_self_similarity():
    print("\n--- Running Test 3: Self-Similarity Analysis ---")
    data_dir = "theory_test_data"
    
    file_pattern = os.path.join(data_dir, "u_hat_*.npy")
    u_files = sorted(glob.glob(file_pattern))
    
    if not u_files:
        print(f"Error: No data files found in '{data_dir}'.")
        return

    # Estimate blow-up time T* as the time of the last saved snapshot
    T_star_str = os.path.basename(u_files[-1]).split('_')[-1].replace('.npy', '')
    T_star = float(T_star_str)
    print(f"Estimated blow-up time T* = {T_star:.5f}")

    fig, axes = plt.subplots(1, 2, figsize=(14, 6))
    fig.suptitle("Self-Similarity Analysis", fontsize=16)
    axes[0].set_title("Raw Vorticity Profiles")
    axes[0].set_xlabel("x")
    axes[0].set_ylabel("Max Vorticity")
    axes[0].grid(True, alpha=0.5)

    axes[1].set_title("Rescaled Profiles (Collapse)")
    axes[1].set_xlabel(r"Rescaled distance $(x - x_0) / (T^* - t)^{1/2}$")
    axes[1].set_ylabel(r"Rescaled vorticity $\omega_{max} \cdot (T^* - t)$")
    axes[1].grid(True, alpha=0.5)

    colors = plt.cm.viridis(np.linspace(0, 1, len(u_files)))

    for i, u_file_path in enumerate(u_files):
        time_str = os.path.basename(u_file_path).split('_')[-1].replace('.npy', '')
        t = float(time_str)
        
        v_file_path = os.path.join(data_dir, f"v_hat_t_{time_str}.npy")
        w_file_path = os.path.join(data_dir, f"w_hat_t_{time_str}.npy")
        
        u_hat = np.load(u_file_path)
        v_hat = np.load(v_file_path)
        w_hat = np.load(w_file_path)
        
        vort_mag = get_vorticity_magnitude(u_hat, v_hat, w_hat)
        central_plane_vort = vort_mag[:, :, N_RES // 2]
        
        # Find peak location
        peak_idx = np.unravel_index(np.argmax(central_plane_vort), central_plane_vort.shape)
        x0 = x_1d[peak_idx[0]]
        
        # Extract 1D profile through the peak
        profile = central_plane_vort[:, peak_idx[1]]
        
        # Plot raw profile
        axes[0].plot(x_1d, profile, color=colors[i], label=f"t={t:.5f}")
        
        # --- Rescaling ---
        dt = T_star - t
        if dt < 1e-9: continue # Avoid division by zero for the last point
        
        # Scaling law for 3D Euler/Navier-Stokes
        alpha = 1.0  # Vorticity scaling
        beta = 0.5   # Length scaling
        
        rescaled_x = (x_1d - x0) / (dt**beta)
        rescaled_vort = profile * (dt**alpha)
        
        axes[1].plot(rescaled_x, rescaled_vort, color=colors[i], label=f"t={t:.5f}")

    axes[0].legend()
    axes[1].set_xlim(-20, 20)
    axes[1].legend()

    filename = "hypo_theory_test_3_self_similarity.png"
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.savefig(filename, dpi=150)
    plt.show()
    print(f"Self-similarity analysis plot saved to {filename}")


if __name__ == "__main__":
    analyze_self_similarity() 
